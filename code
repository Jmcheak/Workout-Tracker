import tkinter as tk
from tkinter import ttk, messagebox
import sqlite3
from datetime import date, datetime

# Database setup
conn = sqlite3.connect('workout_tracker.db')
c = conn.cursor()

c.execute('''CREATE TABLE IF NOT EXISTS workout_log (
                id INTEGER PRIMARY KEY,
                date TEXT,
                day TEXT,
                exercise TEXT,
                set_number INTEGER,
                reps INTEGER,
                weight REAL)''')

c.execute('''CREATE TABLE IF NOT EXISTS weight_log (
                id INTEGER PRIMARY KEY,
                date TEXT,
                weight REAL)''')

conn.commit()

# Workout plan
workout_plan = {
    "Day 1: Push": [
        "Barbell Bench Press",
        "Dumbbell Shoulder Press",
        "Incline Dumbbell Press",
        "Side Lateral Raises (Dumbbells)",
        "Tricep Kickback (Dumbbells)",
        "Push-Ups"
    ],
    "Day 2: Pull": [
        "Barbell Rack Pull",
        "Bent Over Rows (Barbell)",
        "Pull-Ups (Bodyweight)",
        "Dumbbell Rows",
        "Reverse Flyes (Dumbbells)",
        "Barbell Curls"
    ],
    "Day 3: Legs": [
        "Squats (Barbell)",
        "Lunges (Dumbbells)",
        "Romanian Deadlifts (Barbell)",
        "Calf Raises (Dumbbells)",
        "Goblet Squats (Dumbbell)"
    ],
    "Day 4: Push": [
        "Barbell Bench Press",
        "Dumbbell Flyes",
        "Arnold Press (Dumbbells)",
        "Front Raises (Dumbbells)",
        "Skull Crushers (Dumbbells)",
        "Close-Grip Push-Ups"
    ],
    "Day 5: Pull": [
        "Bent Over Rows (Dumbbells)",
        "Chin-Ups (Bodyweight)",
        "Single-Arm Rows (Dumbbell)",
        "Barbell Shrugs",
        "Hammer Curls (Dumbbells)",
        "Inverted Rows (Bodyweight)"
    ],
    "Day 6: Legs": [
        "Box Squats (Barbell)",
        "Standing Calf Raises (Dumbbells)",
        "Deadlift (Barbell)",
        "Glute Kickback (Resistance Band)",
        "Bulgarian Split Squats (Dumbbells)"
    ]
}

# Helper function to check if the current date is the beginning of the week (Monday)
def is_beginning_of_week():
    return datetime.today().weekday() == 0

# GUI setup
class WorkoutTrackerApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Workout Tracker")
        self.geometry("600x750")

        self.day_var = tk.StringVar()
        self.set_number = 1
        self.current_exercise_index = 0
        self.current_day_plan = None

        self.exercise_var = tk.StringVar()
        self.reps_var = tk.StringVar()
        self.weight_var = tk.StringVar()
        self.current_weight_var = tk.StringVar()
        self.date_var = tk.StringVar(value=date.today().isoformat())
        self.weight_date_var = tk.StringVar(value=date.today().isoformat())

        self.last_reps_var = tk.StringVar()
        self.last_weight_var = tk.StringVar()

        self.create_widgets()

    def create_widgets(self):
        if is_beginning_of_week():
            self.create_weight_entry_section()

        day_label = ttk.Label(self, text="Select Day")
        day_label.pack(pady=5)

        self.day_menu = ttk.Combobox(self, textvariable=self.day_var)
        self.day_menu['values'] = list(workout_plan.keys())
        self.day_menu.pack(pady=5)
        self.day_menu.bind("<<ComboboxSelected>>", self.start_workout)

        date_label = ttk.Label(self, text="Date (YYYY-MM-DD)")
        date_label.pack(pady=5)

        self.date_entry = ttk.Entry(self, textvariable=self.date_var)
        self.date_entry.pack(pady=5)

        self.exercise_label = ttk.Label(self, text="Current Exercise: ")
        self.exercise_label.pack(pady=5)

        rep_range_label = ttk.Label(self, text="Rep Range: Barbell: 12. Dumbbell: 15, Bodyweight: AMRAP")
        rep_range_label.pack(pady=5)

        reps_label = ttk.Label(self, text="Reps")
        reps_label.pack(pady=5)

        self.reps_entry = ttk.Entry(self, textvariable=self.reps_var)
        self.reps_entry.pack(pady=5)

        weight_label = ttk.Label(self, text="Weight")
        weight_label.pack(pady=5)

        self.weight_entry = ttk.Entry(self, textvariable=self.weight_var)
        self.weight_entry.pack(pady=5)

        last_reps_label = ttk.Label(self, text="Last Reps")
        last_reps_label.pack(pady=5)

        self.last_reps_entry = ttk.Entry(self, textvariable=self.last_reps_var, state='readonly')
        self.last_reps_entry.pack(pady=5)

        last_weight_label = ttk.Label(self, text="Last Weight")
        last_weight_label.pack(pady=5)

        self.last_weight_entry = ttk.Entry(self, textvariable=self.last_weight_var, state='readonly')
        self.last_weight_entry.pack(pady=5)

        submit_button = ttk.Button(self, text="Log Set", command=self.log_set)
        submit_button.pack(pady=20)

        view_logs_button = ttk.Button(self, text="View Workout Logs", command=self.view_workout_logs)
        view_logs_button.pack(pady=5)

        view_weights_button = ttk.Button(self, text="View Weight Logs", command=self.view_weight_logs)
        view_weights_button.pack(pady=5)

    def create_weight_entry_section(self):
        weight_label = ttk.Label(self, text="Enter Current Weight (lbs)")
        weight_label.pack(pady=5)

        self.current_weight_entry = ttk.Entry(self, textvariable=self.current_weight_var)
        self.current_weight_entry.pack(pady=5)

        weight_date_label = ttk.Label(self, text="Weight Log Date (YYYY-MM-DD)")
        weight_date_label.pack(pady=5)

        self.weight_date_entry = ttk.Entry(self, textvariable=self.weight_date_var)
        self.weight_date_entry.pack(pady=5)

        weight_submit_button = ttk.Button(self, text="Log Weight", command=self.log_weight)
        weight_submit_button.pack(pady=10)

    def start_workout(self, event):
        self.set_number = 1
        self.current_exercise_index = 0
        self.current_day_plan = workout_plan[self.day_var.get()]
        self.update_exercise_label()
        self.load_last_workout()

    def update_exercise_label(self):
        if self.current_exercise_index < len(self.current_day_plan):
            exercise = self.current_day_plan[self.current_exercise_index]
            self.exercise_var.set(exercise)
            self.exercise_label.config(text=f"Current Exercise: {exercise} (Set {self.set_number}/3)")
        else:
            self.exercise_label.config(text="Workout Complete!")

    def log_set(self):
        if self.current_exercise_index < len(self.current_day_plan):
            day = self.day_var.get()
            exercise = self.exercise_var.get()
            reps = self.reps_var.get()
            weight = self.weight_var.get()
            log_date = self.date_var.get()

            if exercise and reps and weight and log_date:
                with conn:
                    c.execute("INSERT INTO workout_log (date, day, exercise, set_number, reps, weight) VALUES (?, ?, ?, ?, ?, ?)",
                              (log_date, day, exercise, self.set_number, reps, weight))
                self.reps_var.set('')
                self.weight_var.set('')
                self.set_number += 1  # Increment set_number after logging

                # Check if all sets for the current exercise are logged
                if self.set_number > 3:
                    self.set_number = 1  # Reset set_number for the next exercise
                    self.current_exercise_index += 1  # Move to the next exercise
                    self.update_exercise_label()
                    self.load_last_workout()
                else:
                    self.update_exercise_label()
                    self.load_last_workout()

                conn.commit()  # Commit transaction
            else:
                messagebox.showwarning("Input Error", "Please fill in all fields")
        else:
            messagebox.showinfo("Workout Complete", "You have completed your workout for today!")

    def log_weight(self):
        current_weight = self.current_weight_var.get()
        weight_date = self.weight_date_var.get()

        if current_weight and weight_date:
            with conn:
                c.execute("INSERT INTO weight_log (date, weight) VALUES (?, ?)",
                          (weight_date, current_weight))
            self.current_weight_var.set('')
            self.weight_date_var.set(date.today().isoformat())
            messagebox.showinfo("Success", "Weight logged successfully")
        else:
            messagebox.showwarning("Input Error", "Please enter your weight and date")

    def load_last_workout(self):
        if self.current_exercise_index < len(self.current_day_plan):
            exercise = self.current_day_plan[self.current_exercise_index]
            c.execute("SELECT reps, weight FROM workout_log WHERE day=? AND exercise=? ORDER BY date DESC, set_number DESC LIMIT 1", 
                      (self.day_var.get(), exercise))
            last_workout = c.fetchone()
            if last_workout:
                self.last_reps_var.set(last_workout[0])
                self.last_weight_var.set(last_workout[1])
            else:
                self.last_reps_var.set('')
                self.last_weight_var.set('')

    def view_workout_logs(self):
        logs_window = tk.Toplevel(self)
        logs_window.title("Workout Logs")

        tree = ttk.Treeview(logs_window)
        tree["columns"] = ("Date", "Day", "Exercise", "Set Number", "Reps", "Weight")

        tree.heading("#0", text="ID")
        tree.heading("Date", text="Date")
        tree.heading("Day", text="Day")
        tree.heading("Exercise", text="Exercise")
        tree.heading("Set Number", text="Set Number")
        tree.heading("Reps", text="Reps")
        tree.heading("Weight", text="Weight")

        tree.pack()

        c.execute("SELECT * FROM workout_log")
        rows = c.fetchall()

        for row in rows:
            tree.insert("", tk.END, text=row[0], values=(row[1], row[2], row[3], row[4], row[5], row[6]))

    def view_weight_logs(self):
        weight_logs_window = tk.Toplevel(self)
        weight_logs_window.title("Weight Logs")

        tree = ttk.Treeview(weight_logs_window)
        tree["columns"] = ("Date", "Weight")

        tree.heading("#0", text="ID")
        tree.heading("Date", text="Date")
        tree.heading("Weight", text="Weight")

        tree.pack()

        c.execute("SELECT * FROM weight_log")
        rows = c.fetchall()

        for row in rows:
            tree.insert("", tk.END, text=row[0], values=(row[1], row[2]))

if __name__ == "__main__":
    app = WorkoutTrackerApp()
    app.mainloop()

# Close database connection when application exits
conn.close()
